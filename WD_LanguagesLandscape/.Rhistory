aliases[, 1] <- NULL
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'	DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'	DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
View(aliases_ASTRONOMY)
labels <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels.csv',
row_names = F)
labels[, 1] <- NULL
descriptions <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions.csv',
row_names = F)
descriptions[, 1] <- NULL
aliases <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases.csv',
row_names = F)
aliases[, 1] <- NULL
labels <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels.csv',
row_names = F)
labels[, 1] <- NULL
descriptions <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions.csv',
row_names = F)
descriptions[, 1] <- NULL
aliases <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases.csv',
row_names = F)
aliases[, 1] <- NULL
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
View(aliases)
View(descriptions)
View(labels)
View(aliases_ASTRONOMY)
View(descriptions_ASTRONOMY)
View(labels_ASTRONOMY)
w <- which(labels_ASTRONOMY$language == '')
w
labels_ASTRONOMY[w, ]
w <- which(labels_ASTRONOMY$language == '')
w
if (length(w) > 0) {
labels_ASTRONOMY[w, ] <- NULL
}
labels_ASTRONOMY[, 1] <- NULL
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
w <- which(labels_ASTRONOMY$language == '')
w
if (length(w) > 0) {
labels_ASTRONOMY <- labels_ASTRONOMY[-w, ]
}
w <- which(labels_ASTRONOMY$language == '')
w
length(w) > 0
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
w <- which(descriptions_ASTRONOMY$language == '')
w
View(descriptions_ASTRONOMY)
w <- which(descriptions_ASTRONOMY$language == '')
w
if (length(w) > 0) {
descriptions_ASTRONOMY <- descriptions_ASTRONOMY[-w, ]
}
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
w <- which(aliases_ASTRONOMY$language == '')
if (length(w) > 0) {
aliases_ASTRONOMY <- aliases_ASTRONOMY[-w, ]
}
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
w <- which(aliases_ASTRONOMY$language == '')
w
if (length(w) > 0) {
aliases_ASTRONOMY <- aliases_ASTRONOMY[-w, ]
}
w
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
w <- which(aliases_ASTRONOMY$language == '')
w
length(w) > 0
if (length(w) > 0) {
aliases_ASTRONOMY <- aliases_ASTRONOMY[-w, ]
}
w <- which(aliases_ASTRONOMY$language == '')
w
labels_SCIENTIFICPAPERS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_SCIENTIFICPAPERS.csv',
row_names = F)
labels_SCIENTIFICPAPERS[, 1] <- NULL
w <- which(labels_SCIENTIFICPAPERS$language == '')
w
if (length(w) > 0) {
labels_SCIENTIFICPAPERS <- labels_SCIENTIFICPAPERS[-w, ]
}
w <- which(labels_SCIENTIFICPAPERS$language == '')
w
descriptions_SCIENTIFICPAPERS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_SCIENTIFICPAPERS.csv',
row_names = F)
descriptions_SCIENTIFICPAPERS[, 1] <- NULL
w <- which(descriptions_SCIENTIFICPAPERS$language == '')
w
if (length(w) > 0) {
descriptions_SCIENTIFICPAPERS <- descriptions_SCIENTIFICPAPERS[-w, ]
}
w
aliases_SCIENTIFICPAPERS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_SCIENTIFICPAPERS.csv',
row_names = F)
aliases_SCIENTIFICPAPERS[, 1] <- NULL
w <- which(aliases_SCIENTIFICPAPERS$language == '')
w
if (length(w) > 0) {
aliases_SCIENTIFICPAPERS <- aliases_SCIENTIFICPAPERS[-w, ]
}
w
w <- which(aliases_SCIENTIFICPAPERS$language == '')
w
labels_EVERYTHINGMINUS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_EVERYTHINGMINUS.csv',
row_names = F)
labels_EVERYTHINGMINUS[, 1] <- NULL
w <- which(labels_EVERYTHINGMINUS$language == '')
w
if (length(w) > 0) {
labels_EVERYTHINGMINUS <- labels_EVERYTHINGMINUS[-w, ]
}
w <- which(labels_EVERYTHINGMINUS$language == '')
w
labels_EVERYTHINGMINUS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_EVERYTHINGMINUS.csv',
row_names = F)
labels_EVERYTHINGMINUS[, 1] <- NULL
w <- which(labels_EVERYTHINGMINUS$language == '')
if (length(w) > 0) {
labels_EVERYTHINGMINUS <- labels_EVERYTHINGMINUS[-w, ]
}
descriptions_EVERYTHINGMINUS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_EVERYTHINGMINUS.csv',
row_names = F)
descriptions_EVERYTHINGMINUS[, 1] <- NULL
w <- which(descriptions_EVERYTHINGMINUS$language == '')
w
if (length(w) > 0) {
descriptions_EVERYTHINGMINUS <- descriptions_EVERYTHINGMINUS[-w, ]
}
aliases_EVERYTHINGMINUS <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_EVERYTHINGMINUS.csv',
row_names = F)
aliases_EVERYTHINGMINUS[, 1] <- NULL
w <- which(aliases_EVERYTHINGMINUS$language == '')
w
if (length(w) > 0) {
aliases_EVERYTHINGMINUS <- aliases_EVERYTHINGMINUS[-w, ]
}
labels <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels.csv',
row_names = F)
View(labels)
labels[, 1] <- NULL
descriptions <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions.csv',
row_names = F)
descriptions[, 1] <- NULL
aliases <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases.csv',
row_names = F)
aliases[, 1] <- NULL
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
View(labels_ASTRONOMY)
labels_ASTRONOMY[, 1] <- NULL
w <- which(labels_ASTRONOMY$language == '')
if (length(w) > 0) {
labels_ASTRONOMY <- labels_ASTRONOMY[-w, ]
}
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
View(descriptions_ASTRONOMY)
descriptions_ASTRONOMY[, 1] <- NULL
w <- which(descriptions_ASTRONOMY$language == '')
w
View(labels_ASTRONOMY)
View(descriptions_ASTRONOMY)
View(labels)
### --- Process Datamodel Terms: EVERYTHING
labelsEVERYTHING <- labels %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = count/numitems) %>%
dplyr::arrange(snapshot)
library(dplyr)
### --- Process Datamodel Terms: EVERYTHING
labelsEVERYTHING <- labels %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = count/numitems) %>%
dplyr::arrange(snapshot)
View(labelsEVERYTHING)
### --- Process Datamodel Terms: EVERYTHING
labelsEVERYTHING <- labels %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
View(labelsEVERYTHING)
### --- Process Datamodel Terms: EVERYTHING
labelsEVERYTHING <- labels %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
labelsEVERYTHING$averageM <- labelsEVERYTHING$average/1000000
aliasesEVERYTHING <- aliases %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
aliasesEVERYTHING$averageM <- aliasesEVERYTHING$average/1000000
View(aliasesEVERYTHING)
descriptionsEVERYTHING <- descriptions %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
descriptionsEVERYTHING$averageM <- descriptionsEVERYTHING$average/1000000
View(descriptionsEVERYTHING)
### --- Process Datamodel Terms: ASTRONOMY
labels_ASTRONOMY <- labels_ASTRONOMY %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
labels_ASTRONOMY$averageM <- labels_ASTRONOMY$average/1000000
View(labels_ASTRONOMY)
labels_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Labels_ASTRONOMY.csv',
row_names = F)
labels_ASTRONOMY[, 1] <- NULL
w <- which(labels_ASTRONOMY$language == '')
if (length(w) > 0) {
labels_ASTRONOMY <- labels_ASTRONOMY[-w, ]
}
descriptions_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Descriptions_ASTRONOMY.csv',
row_names = F)
descriptions_ASTRONOMY[, 1] <- NULL
w <- which(descriptions_ASTRONOMY$language == '')
if (length(w) > 0) {
descriptions_ASTRONOMY <- descriptions_ASTRONOMY[-w, ]
}
aliases_ASTRONOMY <- get_WDCM_table(params$general$publishedDatamodelDir,
'DM_Terms_Aliases_ASTRONOMY.csv',
row_names = F)
aliases_ASTRONOMY[, 1] <- NULL
w <- which(aliases_ASTRONOMY$language == '')
if (length(w) > 0) {
aliases_ASTRONOMY <- aliases_ASTRONOMY[-w, ]
}
View(labels_ASTRONOMY)
### --- Process Datamodel Terms: ASTRONOMY
labels_ASTRONOMY <- labels_ASTRONOMY %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
labels_ASTRONOMY$averageM <- labels_ASTRONOMY$average/1000000
View(labels_ASTRONOMY)
aliases_ASTRONOMY <- aliases_ASTRONOMY %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
aliases_ASTRONOMY$averageM <- aliases_ASTRONOMY$average/1000000
View(aliases_ASTRONOMY)
descriptions_ASTRONOMY <- descriptions_ASTRONOMY %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
descriptions_ASTRONOMY$averageM <- descriptions_ASTRONOMY$average/1000000
View(descriptions_ASTRONOMY)
### --- Process Datamodel Terms: SCIENTIFICPAPERS
labels_SCIENTIFICPAPERS <- labels_SCIENTIFICPAPERS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
labels_SCIENTIFICPAPERS$averageM <- labels_SCIENTIFICPAPERS$average/1000000
View(labels_SCIENTIFICPAPERS)
aliases_SCIENTIFICPAPERS <- aliases_SCIENTIFICPAPERS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
aliases_SCIENTIFICPAPERS$averageM <- aliases_SCIENTIFICPAPERS$average/1000000
View(aliases_SCIENTIFICPAPERS)
descriptions_SCIENTIFICPAPERS <- descriptions_SCIENTIFICPAPERS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
descriptions_SCIENTIFICPAPERS$averageM <- descriptions_SCIENTIFICPAPERS$average/1000000
View(descriptions_SCIENTIFICPAPERS)
### --- Process Datamodel Terms: EVERYTHINGMINUS
labels_EVERYTHINGMINUS <- labels_EVERYTHINGMINUS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
labels_EVERYTHINGMINUS$averageM <- labels_EVERYTHINGMINUS$average/1000000
View(labels_EVERYTHINGMINUS)
aliases_EVERYTHINGMINUS <- aliases_EVERYTHINGMINUS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
aliases_EVERYTHINGMINUS$averageM <- aliases_EVERYTHINGMINUS$average/1000000
View(aliases_EVERYTHINGMINUS)
descriptions_EVERYTHINGMINUS <- descriptions_EVERYTHINGMINUS %>%
dplyr::select(snapshot, count, numitems) %>%
dplyr::group_by(snapshot) %>%
dplyr::summarise(average = sum(count)/mean(numitems)) %>%
dplyr::arrange(snapshot)
descriptions_EVERYTHINGMINUS$averageM <- descriptions_EVERYTHINGMINUS$average/1000000
View(descriptions_EVERYTHINGMINUS)
View(labelsEVERYTHING)
View(labels)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
### ---------------------------------------------------------------------------
### --- WD Languages Landscape
### --- Version 1.0.0
### --- 2019.
### --- Author: Goran S. Milovanovic, Data Scientist, WMDE
### --- Developed under the contract between Goran Milovanovic PR Data Kolektiv
### --- and Wikimedia Deutschland (WMDE).
### --- Contact: goran.milovanovic_ext@wikimedia.de
### --- Contact: goran.milovanovic@datakolektiv.com
### ---------------------------------------------------------------------------
### --- LICENSE:
### ---------------------------------------------------------------------------
### --- GPL v2
### --- This file is part of Wikidata Analytics
### --- https://wikidata-analytics.wmflabs.org/
### ---
### --- WDCM is free software: you can redistribute it and/or modify
### --- it under the terms of the GNU General Public License as published by
### --- the Free Software Foundation, either version 2 of the License, or
### --- (at your option) any later version.
### ---
### --- WDCM is distributed in the hope that it will be useful,
### --- but WITHOUT ANY WARRANTY; without even the implied warranty of
### --- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### --- GNU General Public License for more details.
### ---
### --- You should have received a copy of the GNU General Public License
### --- along with WDCM. If not, see <http://www.gnu.org/licenses/>.
### ---------------------------------------------------------------------------
# Test your app
## Run checks ----
## Check the package before sending to prod
devtools::check()
# Deploy
## ShinyProxy
golem::add_dockerfile_shinyproxy()
