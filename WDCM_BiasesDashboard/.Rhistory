## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "WDCMBiasesDashboard", # The Name of the package containing the App
pkg_title = "Wikidata Concepts Monitor Biases Dashboard", # The Title of the package containing the App
pkg_description = "Gender bias in Wikidata usage and north-south divide statistics and maps.", # The Description of the package containing the App
author_first_name = "Goran", # Your First Name
author_last_name = "Milovanović", # Your Last Name
author_email = "goran.milovanovic_ext@wikimedia.de", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_gpl_license(version = 2, include_future = TRUE)
usethis::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct()
## Use git ----
usethis::use_git()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "WDCMBiasesDashboard", # The Name of the package containing the App
pkg_title = "Wikidata Concepts Monitor Biases Dashboard", # The Title of the package containing the App
pkg_description = "Gender bias in Wikidata usage and north-south divide statistics and maps.", # The Description of the package containing the App
author_first_name = "Goran", # Your First Name
author_last_name = "Milovanović", # Your Last Name
author_email = "goran.milovanovic_ext@wikimedia.de", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_gpl_license(version = 2, include_future = TRUE)
usethis::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct()
## Use git ----
usethis::use_git()
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Use Recommended Packages ----
golem::use_recommended_deps()
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "thinkr" )
?new_handle
?trimws
## Run checks ----
## Check the package before sending to prod
devtools::check()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
### --- functions
get_WDCM_table <- function(url_dir, filename, row_names) {
read.csv(paste0(url_dir, filename),
header = T,
stringsAsFactors = F,
check.names = F)
}
# - remote dir
remoteDir <-
'https://analytics.wikimedia.org/datasets/wmde-analytics-engineering/wdcm/biases/'
genderProjectData <- get_WDCM_table(remoteDir,
'genderProjectDataSet.csv')
genderProjectData[, 1] <- NULL
genderProjectData <- dplyr::select(genderProjectData,
-propM, -propF)
genderProjectData$CI5 <- round(genderProjectData$CI5, 2)
genderProjectData$CI95 <- round(genderProjectData$CI95, 2)
genderProjectData$pMF <- round(genderProjectData$pMF, 2)
genderProjectData$mfRation <-
round(genderProjectData$usageM/genderProjectData$usageF, 2)
colnames(genderProjectData) <- c('Project', 'M Usage', 'F Usage',
'M%', 'F%', 'Project Type',
'Probability (M>F)', 'CI 5%', 'CI 95%', 'M/F')
genderProjectData <- dplyr::arrange(genderProjectData, desc(`M Usage`))
mfData <- genderProjectData %>%
dplyr::select('Project', 'Project Type', 'M/F', 'M Usage', 'F Usage')
mfData$Usage <- mfData$`M Usage` + mfData$`F Usage`
library(dplyr)
genderProjectData <- get_WDCM_table(remoteDir,
'genderProjectDataSet.csv')
genderProjectData[, 1] <- NULL
genderProjectData <- dplyr::select(genderProjectData,
-propM, -propF)
genderProjectData$CI5 <- round(genderProjectData$CI5, 2)
genderProjectData$CI95 <- round(genderProjectData$CI95, 2)
genderProjectData$pMF <- round(genderProjectData$pMF, 2)
genderProjectData$mfRation <-
round(genderProjectData$usageM/genderProjectData$usageF, 2)
colnames(genderProjectData) <- c('Project', 'M Usage', 'F Usage',
'M%', 'F%', 'Project Type',
'Probability (M>F)', 'CI 5%', 'CI 95%', 'M/F')
genderProjectData <- dplyr::arrange(genderProjectData, desc(`M Usage`))
mfData <- genderProjectData %>%
dplyr::select('Project', 'Project Type', 'M/F', 'M Usage', 'F Usage')
mfData$Usage <- mfData$`M Usage` + mfData$`F Usage`
mfData <- mfData %>%
dplyr::arrange(desc(Usage)) %>%
dplyr::select('Project', 'Project Type', 'M/F', 'Usage')
mfData <- mfData[1:50, ]
mfData$Project <-
factor(mfData$Project, levels = mfData$Project[order(-mfData$Usage)])
View(genderProjectData)
View(mfData)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_shinyproxy()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
