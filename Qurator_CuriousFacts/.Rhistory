## Add one line by package you want to add as dependency
usethis::use_package( "thinkr" )
# Set options here
options(golem.app.prod = FALSE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
q()
dataM1 <- data.table::fread(
system.file("_data", "dataM1.csv",
package = "CuriousFacts"),
header = T, quote =)
##
golem::fill_desc(
pkg_name = "CuriousFacts", # The Name of the package containing the App
pkg_title = "Wikidata - Curious Facts", # The Title of the package containing the App
pkg_description = "The dashboards reports on anomalies in the Wikidata ontology.",
author_first_name = "Goran", # Your First Name
author_last_name = "Milovanović", # Your Last Name
author_email = "goran.milovanovic_ext@wikimedia.de", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_gpl_license(version = 2,
include_future = TRUE)
usethis::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct()
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Use Recommended Packages ----
golem::use_recommended_deps()
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package("thinkr")
# Set options here
options(golem.app.prod = FALSE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# - endPointURL
endPointURL <-
'https://query.wikidata.org/bigdata/namespace/wdq/sparql?query='
dataM1 <- data.table::fread(
system.file("_data", "dataM1.csv",
package = "CuriousFacts"),
header = T, quote =)
dataM1$explanation <-
gsub('\"\"\"', '', dataM1$explanation)
infoM1 <- data.table::fread(
system.file("_data", "infoM1.csv",
package = "CuriousFacts"),
header = T)
infoM1$V1 <- NULL
incProgress(amount = .25, message = "M1 loaded.")
dataM2 <- data.table::fread(
system.file("_data", "dataM2.csv",
package = "CuriousFacts"),
header = T)
dataM2$explanation <-
gsub('\"\"\"', '', dataM2$explanation)
infoM2 <- data.table::fread(
system.file("_data", "infoM2.csv",
package = "CuriousFacts"),
header = T)
infoM2$V1 <- NULL
# - de-duplicate dataM2
dataM2 <-
dataM2[!duplicated(dataM2[, c('item', 'property')]), ]
dataM3 <- data.table::fread(
system.file("_data", "dataM3.csv",
package = "CuriousFacts"),
header = T)
dataM3$explanation <-
gsub('\"\"', '\"', dataM3$explanation)
infoM3 <- data.table::fread(
system.file("_data", "infoM3.csv",
package = "CuriousFacts"),
header = T)
infoM3$V1 <- NULL
dataSet <- list(dataM1, dataM2, dataM3)
infoSet <- list(infoM1, infoM2, infoM3)
# - clean
rm(list = c('dataM1', 'dataM2', 'dataM3'))
item <- "Q42"
src <- jsonlite::fromJSON(
rawToChar(res$content),
simplifyDataFrame = T)
query <- paste0('SELECT ?image {wd:',
item,
' wdt:P18 ?image .}')
res <- httr::GET(url =
paste0(endPointURL, URLencode(query)))
src <- jsonlite::fromJSON(
rawToChar(res$content),
simplifyDataFrame = T)
src <- src$results$bindings$image$value
srcimg <- tryCatch({
tail(strsplit(src, split = "/")[[1]], 1)},
error = function(condition) {
NULL
})
srcimg
# - crop image
srcimg <- paste0("https://magnus-toolserver.toolforge.org/commonsapi.php?image=",
srcimg,
"&thumbwidth=300")
srcimg <- httr::GET(srcimg)
srcimg <- XML::xmlToList(XML::xmlParse(srcimg))
srcimg
src
srcimg <- tryCatch({
tail(strsplit(src, split = "/")[[1]], 1)},
error = function(condition) {
NULL
})
srcimg
# - copy srcimg
srcimgfile <- srcimg
# - crop image
srcimg <- paste0("https://magnus-toolserver.toolforge.org/commonsapi.php?image=",
srcimg,
"&thumbwidth=300")
srcimg <- httr::GET(srcimg)
srcimg <- XML::xmlToList(XML::xmlParse(srcimg))
# - image attribution
iaqr <-paste0("https://commons.wikimedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles=",
srcimgfile,
"&format=json")
res <- httr::GET(url = URLencode(iaqr))
res$status_code == 200
iaqr <- jsonlite::fromJSON(
rawToChar(res$content))
iaqr
# - image attribution
iaqr <-paste0("https://commons.wikimedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles=",
"File:", srcimgfile,
"&format=json")
iaqr
# - image attribution
iaqr <-paste0("https://commons.wikimedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles=",
"File:", srcimgfile,
"&format=json")
res <- httr::GET(url = URLencode(iaqr))
res$status_code == 200
iaqr <- jsonlite::fromJSON(
rawToChar(res$content))
iaqr
iaqr <- iaqr$query$pages$`10031710`$imageinfo$extmetadata
iaqr
# - image attribution
iaqr <-paste0("https://commons.wikimedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles=",
"File:", srcimgfile,
"&format=json")
res <- httr::GET(url = URLencode(iaqr))
res$status_code == 200
iaqr <- jsonlite::fromJSON(
rawToChar(res$content))
iaqr <- iaqr$query$pages[[1]]$imageinfo$extmetadata
iaqr
iaqr$Credit$value
iaqr$ImageDescription$value
iaqr$CommonsMetadataExtension$value
iaqr
View(iaqr)
iaqr$License$value
iaqr$LicenseUrl$value
iaqr$AttributionRequired$value
iaqr$AttributionRequired$source
iaqr$AttributionRequired$hidden
iaqr$Credit$value
iaqr$Artist$value
usage_terms <- iaqr$UsageTerms$value
usage_terms
license
license <- iaqr$License$value
license
license_url <- iaqr$LicenseUrl$value
license_url
usage_terms <- iaqr$UsageTerms$value
usage_terms
author <- iaqr$Artist$value
author
iaqr$Artist$source
iaqr$Artist$value
gsub(".+>|<.+", "", author)
gsub(".+>|<.+", "", iaqr$Artist$value)
author <- iaqr$Artist$value
author
author <- iaqr$Artist$value
author
gsub("[^>]+>|[^<]<.+", "", author)
author
cat(author0)
cat(author)
author <- iaqr$Artist$value
author
gsub(">[^>|^<]+<|", "", author)
author <- iaqr$Artist$value
author
gsub(">([^>]|[^<])+<", "", author)
author <- iaqr$Artist$value
author
gsub(">[^<>]+<", "", author)
gsub(">.+<", "", author)
author
gsub(">[^<^>]+<", "", author)
grepl(">[^<^>]+<", "", author)
author
grepl(">[^^>]+<", "", author)
grepl(">[^<>]+<", "", author)
author
author <- iaqr$Artist$value
author
regexpr(">[^<>]+<", "", author)
regexpr("Michael Hughes", author)
re <- regexpr("Michael Hughes", author)
re
class(re0)
class(re)
re
sum9r)
length(r)
length(re)
re
re + 1
class(re)
attr(re)
attr(re, 1)
author <- iaqr$Artist$value
author
author <- iaqr$Artist$value
author
re <- regexpr("Michael Hughes", author)
re
re
attr(re, "match.length")
substr(author, re, attr(re, "match.length"))
substr
substr(author, re[1], attr(re, "match.length"))
re
re
re:attr(re, "match.length")
attr(re, "match.length")
substr(author, re, re+attr(re, "match.length"))
substr(author, re, re+attr(re, "match.length")-1)
re <- regexpr(">[^<>]<", author)
r
re
re <- regexpr(">[^<>]+<", author)
re
substr(author, re, re+attr(re, "match.length")-1)
substr(author, re+1, re+attr(re, "match.length")-2)
re <- regexpr(">[^<>]+<", author)
substr(author, re+1, re+attr(re, "match.length")-2)
# - image attribution
iaqr <-paste0("https://commons.wikimedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles=",
"File:", srcimgfile,
"&format=json")
res <- httr::GET(url = URLencode(iaqr))
res$status_code == 200
iaqr <- jsonlite::fromJSON(
rawToChar(res$content))
iaqr <- iaqr$query$pages[[1]]$imageinfo$extmetadata
license <- iaqr$License$value
license_url <- iaqr$LicenseUrl$value
usage_terms <- iaqr$UsageTerms$value
author <- iaqr$Artist$value
re <- regexpr(">[^<>]+<", author)
author <- substr(author,
re+1,
re+attr(re, "match.length")-2)
iaqr
license <- iaqr$License$value
license
license_url
usage_terms
author
license <- iaqr$License$value
license_url <- iaqr$LicenseUrl$value
usage_terms <- iaqr$UsageTerms$value
author <- iaqr$Artist$value
re <- regexpr(">[^<>]+<", author)
author <- substr(author,
re+1,
re+attr(re, "match.length")-2)
license
license_url
usage_terms
author
author <- iaqr$Artist$value
author
author <- iaqr$Artist$value
author
author <- gsub(".+href", "", author)
author
re <- regexpr(">[^<>]+<", author)
author <- substr(author,
re+1,
re+attr(re, "match.length")-2)
author
usage_terms
usage_terms
author
license
license_url
license
return(
paste0('<p><img src="',
URLencode(srcimg$file$urls$thumbnail),'">',
'<br>',
'Author: ', author,
'<br>',
'usage_terms<br>',
'<a href="', license_url, '">',
license, '</a></p>')
)
paste0('<p><img src="',
URLencode(srcimg$file$urls$thumbnail),'">',
'<br>',
'Author: ', author,
'<br>',
'usage_terms<br>',
'<a href="', license_url, '">',
license, '</a></p>')
paste0('<p><img src="',
URLencode(srcimg$file$urls$thumbnail),'">',
'<br>',
'Author: ', author,
'<br>',
usage_terms, '<br>',
'<a href="', license_url, '">',
license, '</a></p>')
##
golem::fill_desc(
pkg_name = "CuriousFacts", # The Name of the package containing the App
pkg_title = "Wikidata - Curious Facts", # The Title of the package containing the App
pkg_description = "The dashboards reports on anomalies in the Wikidata ontology.",
author_first_name = "Goran", # Your First Name
author_last_name = "Milovanović", # Your Last Name
author_email = "goran.milovanovic_ext@wikimedia.de", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_gpl_license(version = 2,
include_future = TRUE)
usethis::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct()
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Use Recommended Packages ----
golem::use_recommended_deps()
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package("thinkr")
# Set options here
options(golem.app.prod = FALSE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
license
# Run the application
run_app()
license
license
### ---------------------------------------------------------------------------
### --- Qurator: Curious Facts
### --- Version 1.0.0
### --- 2021.
### --- Author: Goran S. Milovanovic, Data Scientist, WMDE
### --- Developed under the contract between Goran Milovanovic PR Data Kolektiv
### --- and Wikimedia Deutschland (WMDE).
### --- Contact: goran.milovanovic_ext@wikimedia.de
### --- Contact: goran.milovanovic@datakolektiv.com
### ---------------------------------------------------------------------------
### --- LICENSE:
### ---------------------------------------------------------------------------
### --- GPL v2
### --- This file is part of Wikidata Analytics (WA)
### --- https://wikidata-analytics.wmflabs.org/
### ---
### --- WA is free software: you can redistribute it and/or modify
### --- it under the terms of the GNU General Public License as published by
### --- the Free Software Foundation, either version 2 of the License, or
### --- (at your option) any later version.
### ---
### --- WA is distributed in the hope that it will be useful,
### --- but WITHOUT ANY WARRANTY; without even the implied warranty of
### --- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### --- GNU General Public License for more details.
### ---
### --- You should have received a copy of the GNU General Public License
### --- along with WA If not, see <http://www.gnu.org/licenses/>.
### ---------------------------------------------------------------------------
##
golem::fill_desc(
pkg_name = "CuriousFacts", # The Name of the package containing the App
pkg_title = "Wikidata - Curious Facts", # The Title of the package containing the App
pkg_description = "The dashboards reports on anomalies in the Wikidata ontology.",
author_first_name = "Goran", # Your First Name
author_last_name = "Milovanović", # Your Last Name
author_email = "goran.milovanovic_ext@wikimedia.de", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_gpl_license(version = 2,
include_future = TRUE)
usethis::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct()
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Use Recommended Packages ----
golem::use_recommended_deps()
### ---------------------------------------------------------------------------
### --- Qurator: Curious Facts
### --- Version 1.0.0
### --- 2021.
### --- Author: Goran S. Milovanovic, Data Scientist, WMDE
### --- Developed under the contract between Goran Milovanovic PR Data Kolektiv
### --- and Wikimedia Deutschland (WMDE).
### --- Contact: goran.milovanovic_ext@wikimedia.de
### --- Contact: goran.milovanovic@datakolektiv.com
### ---------------------------------------------------------------------------
### --- LICENSE:
### ---------------------------------------------------------------------------
### --- GPL v2
### --- This file is part of Wikidata Analytics (WA)
### --- https://wikidata-analytics.wmflabs.org/
### ---
### --- WA is free software: you can redistribute it and/or modify
### --- it under the terms of the GNU General Public License as published by
### --- the Free Software Foundation, either version 2 of the License, or
### --- (at your option) any later version.
### ---
### --- WA is distributed in the hope that it will be useful,
### --- but WITHOUT ANY WARRANTY; without even the implied warranty of
### --- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### --- GNU General Public License for more details.
### ---
### --- You should have received a copy of the GNU General Public License
### --- along with WA If not, see <http://www.gnu.org/licenses/>.
### ---------------------------------------------------------------------------
# Engineering
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package("thinkr")
### ---------------------------------------------------------------------------
### --- Qurator: Curious Facts
### --- Version 1.0.0
### --- 2021.
### --- Author: Goran S. Milovanovic, Data Scientist, WMDE
### --- Developed under the contract between Goran Milovanovic PR Data Kolektiv
### --- and Wikimedia Deutschland (WMDE).
### --- Contact: goran.milovanovic_ext@wikimedia.de
### --- Contact: goran.milovanovic@datakolektiv.com
### ---------------------------------------------------------------------------
### --- LICENSE:
### ---------------------------------------------------------------------------
### --- GPL v2
### --- This file is part of Wikidata Analytics (WA)
### --- https://wikidata-analytics.wmflabs.org/
### ---
### --- WA is free software: you can redistribute it and/or modify
### --- it under the terms of the GNU General Public License as published by
### --- the Free Software Foundation, either version 2 of the License, or
### --- (at your option) any later version.
### ---
### --- WA is distributed in the hope that it will be useful,
### --- but WITHOUT ANY WARRANTY; without even the implied warranty of
### --- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### --- GNU General Public License for more details.
### ---
### --- You should have received a copy of the GNU General Public License
### --- along with WA If not, see <http://www.gnu.org/licenses/>.
### ---------------------------------------------------------------------------
# Set options here
options(golem.app.prod = FALSE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
